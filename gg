stages:
  - frontend
  - backend

variables:
  DJANGO_SCREEN_NAME: "django"
  VUE_SCREEN_NAME: "vue"
  DJANGO_PORT: "8000"
  VUE_PORT: "9980"
  DJANGO_LOG: "django_server.log"
  VUE_LOG: "vue_server.log"
  INTERNAL_IP: "0.0.0.0"  # Binding to all network interfaces

frontend:
  stage: frontend
  tags:
    - shell
  script:
    # Check if port $VUE_PORT is available
    - echo "Checking if port $VUE_PORT is available..."
    - if lsof -i :$VUE_PORT; then
        echo "Port $VUE_PORT is already in use!";
        exit 1;
      else
        echo "Port $VUE_PORT is available.";
      fi

    # Start Vue server in a screen session, binding to all interfaces (0.0.0.0)
    - echo "Starting Vue server on $INTERNAL_IP:$VUE_PORT..."
    - if screen -list | grep -q "$VUE_SCREEN_NAME"; then
        echo "Screen session '$VUE_SCREEN_NAME' already running.";
      else
        screen -dmS "$VUE_SCREEN_NAME" bash -c "npm run dev -- --host 0.0.0.0 --port $VUE_PORT > $VUE_LOG 2>&1";
        echo "Vue server started on $INTERNAL_IP:$VUE_PORT.";
      fi

    # Wait for the server to start
    - echo "Waiting for Vue server to fully start..."
    - sleep 20  # Increased wait time to ensure Vue has enough time to start

    # Check if Vue server is running
    - echo "Checking Vue server on $INTERNAL_IP:$VUE_PORT..."
    - curl -s --head http://$INTERNAL_IP:$VUE_PORT || (echo "Vue server is not running on $INTERNAL_IP:$VUE_PORT"; exit 1)

    # Tail the Vue logs for debugging
    - echo "Tail Vue logs:"
    - tail -n 40 $VUE_LOG
  artifacts:
    paths:
      - $VUE_LOG
    expire_in: 1 day

backend:
  stage: backend
  tags:
    - shell
  script:
    # Check if port $DJANGO_PORT is available
    - echo "Checking if port $DJANGO_PORT is available..."
    - if lsof -i :$DJANGO_PORT; then
        echo "Port $DJANGO_PORT is already in use!";
        exit 1;
      else
        echo "Port $DJANGO_PORT is available.";
      fi

    # Install dependencies for Django
    - echo "Installing Django dependencies..."
    - poetry install

    # Start Django server in a screen session, binding to all interfaces (0.0.0.0)
    - echo "Starting Django server on $INTERNAL_IP:$DJANGO_PORT..."
    - if screen -list | grep -q "$DJANGO_SCREEN_NAME"; then
        echo "Screen session '$DJANGO_SCREEN_NAME' already running.";
      else
        screen -dmS "$DJANGO_SCREEN_NAME" bash -c "poetry shell && python manage.py runserver_plus 0.0.0.0:$DJANGO_PORT --cert-file devserver.crt --key-file devserver.key > $DJANGO_LOG 2>&1";
        echo "Django server started on $INTERNAL_IP:$DJANGO_PORT.";
      fi

    # Wait for the server to start
    - echo "Waiting for Django server to fully start..."
    - sleep 20  # Increased wait time to ensure Django has enough time to start

    # Check if Django server is running
    - echo "Checking Django server on $INTERNAL_IP:$DJANGO_PORT..."
    - curl -s --head http://$INTERNAL_IP:$DJANGO_PORT || (echo "Django server is not running on $INTERNAL_IP:$DJANGO_PORT"; exit 1)

    # Tail the Django logs for debugging
    - echo "Tail Django logs:"
    - tail -n 40 $DJANGO_LOG
  artifacts:
    paths:
      - $DJANGO_LOG
    expire_in: 1 day
