# Retrieve the primary IP address of the machine
$INSTANCE_IP = (Get-NetIPAddress -AddressFamily IPv4 | Where-Object { $_.InterfaceAlias -notlike "*Loopback*" }).IPAddress

# Define the configuration content
$configContent = @"
prometheus.exporter.windows "integration_alloy" {
  enabled_collectors = ["ad", "cpu", "cs", "logical_disk", "net", "os", "service", "textfile", "time", "diskdrive", "services", "process", "adfs", "cache", "cpu_info", "dfsr", "dhcp", "dns", "fsrmquota", "iis", "logical_disk", "logon", "memory", "msmq", "mssql", "netframework_clrexceptions", "netframework_clrinterop", "netframework_clrjit", "netframework_clrloading", "netframework_clrlocksandthreads", "netframework_clrmemory", "netframework_clrremoting", "netframework_clrsecurity", "net", "remote_fx", "tcp", "vmware"]  
 }

prometheus.scrape "integration_alloy" {
  scrape_interval = "10s" 
  job_name = "windows" 
  targets = prometheus.exporter.windows.integration_alloy.targets
  forward_to = [prometheus.remote_write.local_prom.receiver,
  ]
}
prometheus.remote_write "local_prom" {
    endpoint {
        url = "http://$INSTANCE_IP:9090/api/v1/write"
    }
}

loki.write "grafana_loki" {
    endpoint {
        url = "http://$INSTANCE_IP:3100/loki/api/v1/push"
    }
}

loki.source.windowsevent "logs_windows_system" {
  eventlog_name          = "System"
  bookmark_path          = "./bookmarks-sys.xml"
  poll_interval          = "0s"
  use_incoming_timestamp = true
  forward_to             = [loki.write.grafana_loki.receiver]
  labels                 = {
    job      = "integrations/windows_exporter",
  }
}

loki.source.windowsevent "logs_windows_application" {
  eventlog_name          = "Application"
  bookmark_path          = "./bookmarks-app.xml"
  poll_interval          = "0s"
  use_incoming_timestamp = true
  forward_to             = [loki.write.grafana_loki.receiver]
  labels                 = {
    job      = "integrations/windows_exporter1",
  }
}

loki.source.windowsevent "logs_windows_security" {
  eventlog_name          = "Security"
  bookmark_path          = "./bookmarks-security.xml"
  poll_interval          = "0s"
  use_incoming_timestamp = true
  forward_to             = [loki.write.grafana_loki.receiver]
  labels                 = {
    job      = "integrations/windows_security",
  }
}
"@

# Path to the configuration file
$configFilePath = "C:\Program Files\GrafanaLabs\Alloy\config.alloy"

# Ensure the file is writable
if (Test-Path -Path $configFilePath) {
    # Backup the existing file
    Copy-Item -Path $configFilePath -Destination "$configFilePath.bak" -Force
    # Delete the existing file
    Remove-Item -Path $configFilePath -Force
}

# Write the configuration content to the file
Set-Content -Path $configFilePath -Value $configContent

Write-Host "Configuration file updated successfully at: $configFilePath"
